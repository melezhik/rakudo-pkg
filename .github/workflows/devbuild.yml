name: devbuild
on:
  workflow_dispatch:
    inputs:
      rakudo-version:
        description: 'Rakudo version'
        required: false
        default: 'HEAD'
      rakudo-configure:
        description: 'Rakudo configure command'
        required: false
        default: 'perl ./Configure.pl --relocatable --backends=moar'
      nqp-version:
        description: 'NQP version'
        required: false
        default: 'HEAD'
      nqp-configure:
        description: 'NQP configure command'
        required: false
        default: 'perl ./Configure.pl --relocatable --backends=moar'
      moarvm-version:
        description: 'MoarVM version'
        required: false
        default: 'HEAD'
      moarvm-configure:
        description: 'MoarVM configure command'
        required: false
        default: 'perl ./Configure.pl --relocatable --backends=moar --debug --optimize=0'
      zef-version:
        description: 'zef version'
        required: false
        default: 'HEAD'
      search-replace:
        description: 'Search and replace command'
        required: false
        default: perl -pi -e 's///' /dev/null
jobs:
  get-sources:
    runs-on: ubuntu-latest
    env:
      DEVBUILD: 1
      RAKUDO_VERSION: ${{ github.event.inputs.rakudo-version }}
      NQP_VERSION: ${{ github.event.inputs.nqp-version }}
      MOARVM_VERSION: ${{ github.event.inputs.moarvm-version }}
      ZEF_VERSION: ${{ github.event.inputs.zef-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download nfpm, MoarVM, nqp, Rakudo and zef
        run: ./actions/download.sh
      - name: Archive artifas
        uses: actions/upload-artifact@v2
        with:
          name: sources
          retention-days: 1
          path: |
            actions/*
            include/*
            config/*
            *.tar.gz
  debugbuild:
    needs: get-sources
    strategy:
      fail-fast: false
      matrix:
        image: [
          "alpine:3.10", "alpine:3.11", "alpine:3.12",
          "alpine:3.13", "alpine:edge",
          "centos:7", "centos:8",
          "registry.access.redhat.com/ubi7-minimal",
          "registry.access.redhat.com/ubi8-minimal",
          "debian:9-slim", "debian:10-slim", "debian:testing-slim",
          "debian:unstable-slim", "debian:experimental",
          "fedora:32", "fedora:33", "fedora:rawhide",
          "opensuse/leap:15.2", "opensuse/tumbleweed",
          "ubuntu:16.04", "ubuntu:18.04", "ubuntu:20.04",
          "ubuntu:20.10", "ubuntu:devel",
        ]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      options: --privileged --ulimit core=-1 --security-opt seccomp=unconfined
    env:
      DEVBUILD: 1
      HARNESS_VERBOSE: 1
      IMAGE: ${{ matrix.image }}
      RAKUDO_CONFIGURE: ${{ github.event.inputs.rakudo-configure }}
      NQP_CONFIGURE: ${{ github.event.inputs.nqp-configure }}
      MOARVM_CONFIGURE: ${{ github.event.inputs.moarvm-configure }}
      SEARCH_REPLACE: ${{ github.event.inputs.search-replace }}
    steps:
      - name: Retrieve sources
        uses: actions/download-artifact@v2
        with:
          name: sources
      - name: Configure core dumps
        run: |
          ulimit -c unlimited
          mkdir -p ${{ github.workspace }}/cores
          echo "${{ github.workspace }}/cores/core.%e" > /proc/sys/kernel/core_pattern
      - name: Create build environment
        run: |
          chmod +x actions/*
          . actions/setup_buildenv.sh
          echo "TAG=$OS-$OS_VERSION" >> $GITHUB_ENV
      - name: Build
        run: ./actions/build.sh
      - name: Rename core dumps
        if: failure()
        run: |
          cd cores
          CORE=`ls -1 core.*`
          if [ ! -z "$CORE" ]; then mv $CORE $CORE-{{ env.TAG }}; echo "CORE=true" >> $GITHUB_ENV
      - name: Archive coredumps
        if: env.CORE == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: coredumps
          retention-days: 1
          path: ${{ github.workspace }}/cores/*
